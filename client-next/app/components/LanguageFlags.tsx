"use client";

import { motion, useAnimationFrame } from "framer-motion";
import { useRef } from "react";
import { useDarkMode } from "../contexts/DarkModeContext";

type Language = {
  code: string;
  label: string;
  flag: string;
  description: string;
};

export const LANGUAGES: Language[] = [
  { code: 'en', label: 'English', flag: 'ЁЯЗ║ЁЯЗ╕', description: 'Practice English with AI' },
  { code: 'es', label: 'Spanish', flag: 'ЁЯЗкЁЯЗ╕', description: 'Practica espa├▒ol con IA' },
  { code: 'fr', label: 'French', flag: 'ЁЯЗлЁЯЗ╖', description: 'Pratiquez le fran├зais avec lтАЩIA' },
  { code: 'zh', label: 'Mandarin', flag: 'ЁЯЗиЁЯЗ│', description: 'чФиAIч╗Гф╣аф╕нцЦЗ' },
  { code: 'ja', label: 'Japanese', flag: 'ЁЯЗпЁЯЗ╡', description: 'AIуБзцЧецЬмшкЮуВТч╖┤ч┐ТуБЩуВЛ' },
  { code: 'ko', label: 'Korean', flag: 'ЁЯЗ░ЁЯЗ╖', description: 'AIьЩА эХиъ╗Ш эХЬъ╡ньЦ┤ ьЧ░ьК╡эХШъ╕░' },
  { code: 'tl', label: 'Tagalog', flag: 'ЁЯЗ╡ЁЯЗн', description: 'Mag-practice ng Filipino gamit ang AI' },
  { code: 'hi', label: 'Hindi', flag: 'ЁЯЗоЁЯЗ│', description: 'AI рдХреЗ рд╕рд╛рде рд╣рд┐рдВрджреА рдХрд╛ рдЕрднреНрдпрд╛рд╕ рдХрд░реЗрдВ' },
  { code: 'ml', label: 'Malayalam', flag: 'ЁЯЗоЁЯЗ│', description: 'AI р┤Йр┤кр┤пр╡Лр┤Чр┤┐р┤Ър╡Нр┤Ър╡Н р┤ор┤▓р┤пр┤╛р┤│р┤В р┤кр┤░р┤┐р┤╢р╡Ар┤▓р┤┐р┤Хр╡Нр┤Хр╡Бр┤Х' },
  { code: 'ta', label: 'Tamil', flag: 'ЁЯЗоЁЯЗ│', description: 'AI роЙроЯройрпН родрооро┐ро┤рпН рокропро┐ро▒рпНроЪро┐' },
  { code: 'or', label: 'Odia', flag: 'ЁЯЗоЁЯЗ│', description: 'AI рм╕рм╣рм┐рмд рмУрмбрм╝рм┐рмЖ рмЕрмнрнНрнЯрм╛рм╕ рмХрм░рмирнНрмдрнБ' },
  // Additional Script Languages
  { code: 'th', label: 'Thai', flag: 'ЁЯЗ╣ЁЯЗн', description: 'р╕Эр╕╢р╕Бр╕ар╕▓р╕йр╕▓р╣Др╕Чр╕вр╕Бр╕▒р╕Ъ AI' },
  { code: 'bn', label: 'Bengali', flag: 'ЁЯЗзЁЯЗй', description: 'AI ржжрж┐ржпрж╝рзЗ ржмрж╛ржВрж▓рж╛ ржЕржирзБрж╢рзАрж▓ржи ржХрж░рзБржи' },
  { code: 'pa', label: 'Punjabi', flag: 'ЁЯЗоЁЯЗ│', description: 'AI риири╛ри▓ рикрй░риЬри╛римрйА рижри╛ риЕринри┐риЖри╕ риХри░рйЛ' },
  { code: 'gu', label: 'Gujarati', flag: 'ЁЯЗоЁЯЗ│', description: 'AI рк╕рк╛ркерлЗ ркЧрлБркЬрк░рк╛ркдрлАркирлЛ ркЕркнрлНркпрк╛рк╕ ркХрк░рлЛ' },
  { code: 'mr', label: 'Marathi', flag: 'ЁЯЗоЁЯЗ│', description: 'AI рд╕рд╣ рдорд░рд╛рдареАрдЪрд╛ рд╕рд░рд╛рд╡ рдХрд░рд╛' },
  { code: 'kn', label: 'Kannada', flag: 'ЁЯЗоЁЯЗ│', description: 'AI р▓Ьр│Кр▓др│Ж р▓Хр▓ир│Нр▓ир▓б р▓Ер▓нр│Нр▓пр▓╛р▓╕ р▓ор▓╛р▓бр▓┐' },
  { code: 'te', label: 'Telugu', flag: 'ЁЯЗоЁЯЗ│', description: 'AI р░др▒Л р░др▒Жр░▓р▒Бр░Чр▒Б р░Ер░нр▒Нр░пр░╛р░╕р░В р░Ър▒Зр░пр░Вр░бр░┐' },
  { code: 'ar', label: 'Arabic', flag: 'ЁЯЗ╕ЁЯЗж', description: '╪к╪п╪▒╪и ╪╣┘Д┘Й ╪з┘Д╪╣╪▒╪и┘К╪й ┘Е╪╣ ╪з┘Д╪░┘Г╪з╪б ╪з┘Д╪з╪╡╪╖┘Ж╪з╪╣┘К' },
];

// Duplicate once for seamless loop
const looped = [...LANGUAGES, ...LANGUAGES];

export default function LanguageFlags() {
  const { isDarkMode } = useDarkMode();
  const containerRef = useRef<HTMLDivElement>(null);
  const x = useRef(0);
  const speed = 1.0; // Adjust for scroll speed

  useAnimationFrame((_, delta) => {
    if (containerRef.current) {
      x.current -= (speed * delta) / 16; // Normalize for frame rate
      const containerWidth = containerRef.current.scrollWidth / 2;
      if (Math.abs(x.current) >= containerWidth) {
        x.current = 0;
      }
      containerRef.current.style.transform = `translateX(${x.current}px)`;
    }
  });

  return (
    <section className={`py-12 ${isDarkMode ? 'bg-gray-900/50' : 'bg-white/50'} overflow-hidden`}>
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Heading */}
        <div className="text-center mb-8">
          <h3 className={`text-4xl font-heading font-semibold ${isDarkMode ? 'text-light-purple' : 'text-rose-primary'} mb-2`}>
            Supporting Heritage Languages Worldwide
          </h3>
        </div>

        {/* Seamless Looping Carousel */}
        <div className="relative w-full overflow-hidden">
          <div
            ref={containerRef}
            className="flex gap-16 items-center whitespace-nowrap will-change-transform"
          >
            {looped.map((lang, index) => (
              <div
                key={`${lang.code}-${index}`}
                className="flex-shrink-0 flex flex-col items-center text-center min-w-[160px] max-w-[200px]"
              >
                <div className="text-4xl sm:text-5xl">{lang.flag}</div>
                <div className={`mt-1 text-sm font-semibold ${isDarkMode ? 'text-gray-200' : 'text-gray-800'}`}>{lang.label}</div>
                <div className={`text-xs sm:text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'} break-words leading-tight`}>
                  {lang.description}
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </section>
  );
}
